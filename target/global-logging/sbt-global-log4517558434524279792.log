[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/App.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\n\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.receptionist.Receptionist\nimport akka.actor.typed.receptionist.ServiceKey\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.scaladsl.Routers\nimport akka.cluster.typed.Cluster\nimport com.typesafe.config.ConfigFactory\n\nobject App {\n\n  // val DroneServiceKey = ServiceKey[DroneNode.Event](\"DroneService\")\n\n  //final case class DroneService(replyTo: ActorRef[DroneNode.Start])\n  \n  private object Drone{\n    def apply(): Behavior[Nothing] = Behaviors.setup[Nothing]{ ctx =>\n      val cluster = Cluster(ctx.system)\n      if (cluster.selfMember.hasRole(\"Drone\")){\n        // Spawning a drone\n          val drone = ctx.spawn(DroneNode(),\"Drone\")\n          // registering it to the key\n          // ctx.system.receptionist ! Receptionist.Register(DroneServiceKey,drone)\n      }\n\n\n      if(cluster.selfMember.hasRole(\"DroneManager\")){\n        // Look at all the drone that are joining\n        // Ignore for now\n        ctx.spawn(DroneManager(),\"DroneManager\")\n      }\n\n\n      Behaviors.empty[Nothing]\n\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n      startup(\"DroneManager\",25251) \n      startup(\"Drone\", 25255)\n\n      startup(\"Drone\", 25256)\n\n      startup(\"Drone\", 25257)\n      // startup(\"DroneManager\", 0)\n  }\n  private def startup(role:String, port: Int): Unit ={\n     val config = ConfigFactory\n      .parseString(s\"\"\"\n      akka.remote.artery.canonical.port=$port\n      akka.cluster.roles = [$role]\n      \"\"\")\n      .withFallback(ConfigFactory.load(\"drone\"))\n    \n      ActorSystem[Nothing](Drone(), \"ClusterSystem\", config)\n  }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m[0J
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m[0J
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jan 9, 2024 10:59:22 AM[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/DroneManager.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.Receptionist\n\n\nobject DroneManager{\n    \n    def apply():Behavior[Receptionist.Listing] ={\n        Behaviors.setup[Receptionist.Listing]{ ctx=>\n            ctx.log.info(\"[DRONE]Manager Started\")\n            // ctx.system.receptionist ! Receptionist.Subscribe(App.DroneServiceKey, ctx.self)\n            ctx.system.receptionist ! Receptionist.Subscribe(DroneNode.DroneServiceKey, ctx.self)\n            Behaviors.receiveMessagePartial[Receptionist.Listing]{\n            case DroneNode.DroneServiceKey.Listing(listings) =>\n              listings.foreach{ps => \n                ps ! DroneNode.Start\n                ctx.log.info(\"[DRONE] New Drone Started\")\n              }\n              Behaviors.same\n          }\n\n        }\n    }\n}"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/MyDrone.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.ServiceKey\nimport akka.actor.typed.receptionist.Receptionist\n\n\nimport scala.concurrent.duration._\n\nobject DroneNode{\n    trait Event\n    case object Start extends Event\n\n    val DroneServiceKey = ServiceKey[Event](\"DroneService\")\n    \n    def apply(): Behavior[Event] = \n        Behaviors.setup{ ctx =>\n            // Need to spawn the sensors\n            ctx.system.receptionist ! Receptionist.Register(DroneNode.DroneServiceKey, ctx.self)\n            Behaviors.receiveMessage{\n                case Start =>\n                    ctx.log.info(\"[DRONE]Started the node\")\n                    Behaviors.same\n            }\n\n        }\n\n}"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m[0J
