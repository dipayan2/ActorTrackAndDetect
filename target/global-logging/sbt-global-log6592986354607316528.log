[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/App.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\n\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.receptionist.Receptionist\nimport akka.actor.typed.receptionist.ServiceKey\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.scaladsl.Routers\nimport akka.cluster.typed.Cluster\nimport com.typesafe.config.ConfigFactory\n\nobject App {\n\n  // val DroneServiceKey = ServiceKey[DroneNode.Event](\"DroneService\")\n\n  //final case class DroneService(replyTo: ActorRef[DroneNode.Start])\n  \n  private object Drone{\n    def apply(): Behavior[Nothing] = Behaviors.setup[Nothing]{ ctx =>\n      val cluster = Cluster(ctx.system)\n      if (cluster.selfMember.hasRole(\"Drone\")){\n        // Spawning a drone\n          val drone = ctx.spawn(DroneNode(),\"Drone\")\n          // registering it to the key\n          // ctx.system.receptionist ! Receptionist.Register(DroneServiceKey,drone)\n      }\n\n\n      if(cluster.selfMember.hasRole(\"DroneManager\")){\n        // Look at all the drone that are joining\n        // Ignore for now\n        ctx.spawn(DroneManager(),\"DroneManager\")\n      }\n\n\n      Behaviors.empty[Nothing]\n\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n      startup(\"DroneManager\",25251) \n      startup(\"Drone\", 25255)\n\n      startup(\"Drone\", 25256)\n\n      startup(\"Drone\", 25257)\n      // startup(\"DroneManager\", 0)\n  }\n  private def startup(role:String, port: Int): Unit ={\n     val config = ConfigFactory\n      .parseString(s\"\"\"\n      akka.remote.artery.canonical.port=$port\n      akka.cluster.roles = [$role]\n      \"\"\")\n      .withFallback(ConfigFactory.load(\"drone\"))\n    \n      ActorSystem[Nothing](Drone(), \"ClusterSystem\", config)\n  }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/stats/App.scala","languageId":"scala","version":1,"text":"package sample.cluster.stats\n\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.receptionist.Receptionist\nimport akka.actor.typed.receptionist.ServiceKey\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.scaladsl.Routers\nimport akka.cluster.typed.Cluster\nimport com.typesafe.config.ConfigFactory\n\nobject App {\n\n  val StatsServiceKey = ServiceKey[StatsService.ProcessText](\"StatsService\")\n\n  private object RootBehavior {\n    def apply(): Behavior[Nothing] = Behaviors.setup[Nothing] { ctx =>\n      val cluster = Cluster(ctx.system)\n      if (cluster.selfMember.hasRole(\"compute\")) {\n        // on every compute node there is one service instance that delegates to N local workers\n        val numberOfWorkers =\n          ctx.system.settings.config.getInt(\"stats-service.workers-per-node\")\n        val workers = ctx\n          .spawn(\n            Routers\n              .pool(numberOfWorkers)(StatsWorker().narrow[StatsWorker.Process])\n              // the worker has a per word cache, so send the same word to the same local worker child\n              .withConsistentHashingRouting(1, _.word),\n            \"WorkerRouter\"\n          )\n        val service = ctx.spawn(StatsService(workers), \"StatsService\")\n\n        // published through the receptionist to the other nodes in the cluster\n        ctx.system.receptionist ! Receptionist\n          .Register(StatsServiceKey, service)\n      }\n      if (cluster.selfMember.hasRole(\"client\")) {\n        val serviceRouter =\n          ctx.spawn(Routers.group(App.StatsServiceKey), \"ServiceRouter\")\n        ctx.spawn(StatsClient(serviceRouter), \"Client\")\n      }\n      Behaviors.empty[Nothing]\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    if (args.isEmpty) {\n      startup(\"compute\", 25251)\n      startup(\"compute\", 25252)\n      startup(\"compute\", 0)\n      startup(\"client\", 0)\n    } else {\n      require(args.length == 2, \"Usage: role port\")\n      startup(args(0), args(1).toInt)\n    }\n  }\n\n  private def startup(role: String, port: Int): Unit = {\n\n    // Override the configuration of the port when specified as program argument\n    val config = ConfigFactory\n      .parseString(s\"\"\"\n      akka.remote.artery.canonical.port=$port\n      akka.cluster.roles = [$role]\n      \"\"\")\n      .withFallback(ConfigFactory.load(\"stats\"))\n\n    ActorSystem[Nothing](RootBehavior(), \"ClusterSystem\", config)\n  }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m[0J
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m[0J
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Dec 8, 2023 1:14:52 PM[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/MyDrone.scala","languageId":"scala","version":1,"text":"package com.example\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.Receptionist\nimport org.apache.commons.math3.linear.ArrayRealVector\n\n\nimport scala.concurrent.duration._\nimport akka.actor.Actor\n\nobject DroneNode {\n    trait Event\n    case object Start extends Event\n    trait KalmanMessage extends Event\n\n    def apply(isLeader: Boolean): Behavior[Event] = Behaviors.setup { context =>\n        val generator = context.spawn(DroneSensor(context.self), \"generator\")\n        val estimator = context.spawn(DroneKalmanEstimator(1), \"estimator\")\n        var globalCalc: Option[ActorRef[KalmanState]] = None\n        if (isLeader)\n            globalCalc = Some(context.spawn(GlobalStateCalc(1), \"globalStateCalc\"))\n        waitForMeasurement(isLeader, generator, estimator, globalCalc)\n    }\n\n    def waitForMeasurement(isLeader: Boolean, generator: ActorRef[KalmanMessage], estimator: ActorRef[KalmanMessage], globalCalc: Option[ActorRef[KalmanState]]): Behavior[Event] = Behaviors.receive { (context, message) =>\n        message match {\n            case Measurement(measurement) =>\n                estimator ! EstimatorInput(measurement, context.self, context.self)\n            if (isLeader)\n                routeLocalStates(isLeader, generator, estimator, globalCalc)\n            else\n                waitForEstimate(isLeader, generator, estimator, globalCalc)\n        }\n    }\n\n    def routeLocalStates(isLeader: Boolean, generator: ActorRef[KalmanMessage], estimator: ActorRef[KalmanMessage], globalCalc: Option[ActorRef[KalmanState]]): Behavior[Event] = Behaviors.setup { context =>\n        var statesReceived = 0 // number of local state messages received so far\n        Behaviors.receive { (context, message) =>\n            statesReceived += 1\n            message match {\n                case LocalState(measurement, invCovarianceMatrix, sender) => \n                    globalCalc match {\n                        case Some(calc) => calc ! LocalState(measurement, invCovarianceMatrix, sender)\n                        case None => context.log.error(\"Leader drone does not have global calc\")\n                    }\n                case _ =>\n                    Behaviors.same\n            }\n            if (statesReceived == 1)\n                waitForEstimate(isLeader, generator, estimator, globalCalc)\n            else\n                Behaviors.same\n        }\n    }\n\n    def waitForEstimate(isLeader: Boolean, generator: ActorRef[KalmanMessage], estimator: ActorRef[KalmanMessage], globalCalc: Option[ActorRef[KalmanState]]): Behavior[Event] = Behaviors.receive { (context, message) =>\n        message match {\n            case Estimate(estimate) =>\n                generator ! Estimate(estimate)\n            waitForMeasurement(isLeader, generator, estimator, globalCalc)\n        }\n    }\n}"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/MyDrone.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/KalmanMain.scala","languageId":"scala","version":1,"text":"//#full-example\n//#currently using example from https://commons.apache.org/proper/commons-math/userguide/filter.html\npackage com.example\n\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport scala.concurrent.duration._\nimport scala.util.Random\nimport org.apache.commons.math3.filter._\nimport org.apache.commons.math3.linear._\nimport org.apache.commons.math3.random.{JDKRandomGenerator, RandomGenerator}\nimport akka.actor.Actor\nimport scala.collection.mutable.ListBuffer\n\n// final case class Estimate(estimate: Double)\nfinal case class StartGenerate()\n\n// object Estimator {\n//   // Constants\n//   val constantVoltage = 10.0\n//   val measurementNoise = 1.0\n//   val processNoise = 1e-5\n  \n//   // A = [ 1 ]\n//   val A = new Array2DRowRealMatrix(Array(1.0))\n\n//   // B = null\n//   val B = new Array2DRowRealMatrix(Array(0.0))\n\n//   // H = [ 1 ]\n//   val H = new Array2DRowRealMatrix(Array(1.0))\n\n//   // x = [ 10 ]\n//   var xBar = new ArrayRealVector(Array(constantVoltage))\n\n//   // Q = [ 1e-5 ]\n//   val Q = new Array2DRowRealMatrix(Array(processNoise))\n\n//   // P = [ 1 ]\n//   var P = new Array2DRowRealMatrix(Array(1.0))\n\n//   // R = [ 0.1 ]\n//   val R = new Array2DRowRealMatrix(Array(measurementNoise))\n\n//   // val pm = new DefaultProcessModel(A, B, Q, x, P0)\n//   // val mm = new DefaultMeasurementModel(H, R)\n//   // val filter = new KalmanFilter(pm, mm)\n\n//   def apply(leader: ActorRef[LocalState], numNodes: Int): Behavior[EstimatorReceivable] = idle(leader, numNodes)\n//   def apply(numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.setup { context => idle(context.self, numNodes) } // Set leader as self if not explicitly passed in\n\n//   private def idle(leader: ActorRef[LocalState], numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.withTimers { timer =>\n//     timer.startSingleTimer(Timeout, 5.second)\n//     // Wait for measurement data\n//     Behaviors.receive { (context, message) =>\n//       message match {\n//         case Measurement(realVec, replyTo) =>\n//           sendLocalState(realVec, leader, replyTo, numNodes)\n//         case Timeout =>\n//           context.log.info(\"Timed out waiting for measurement...\")\n//           Behaviors.stopped\n//         case _ =>\n//           Behaviors.same\n//       }\n//     }\n//   }\n\n//   private def sendLocalState(measurement: ArrayRealVector, leader: ActorRef[LocalState], replyTo: ActorRef[Estimate], numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.setup { context =>\n//     // Need to do \"new Array2DRowRealMatrix(<Matrix>.getData())\" since inner result returns a RealMatrix \n//     leader ! LocalState(measurement, new Array2DRowRealMatrix(H.transpose().multiply(MatrixUtils.inverse(R)).multiply(H).getData()), context.self)\n//     // If the actor is the leader, start receiving local states and caluculating global average\n//     if (leader == context.self) {\n//       calculateGlobalState(leader, replyTo, numNodes)\n//     } else {\n//       receiveGlobalState(leader, replyTo, numNodes)\n//     }\n//   }\n\n//   private def calculateGlobalState(leader: ActorRef[LocalState], replyTo: ActorRef[Estimate], numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.setup { context =>\n//     var statesReceived = 0 // number of local state messages received so far\n//     var avgMeasurement = new ArrayRealVector(H.getRowDimension())\n//     var avgCovarianceMatrix = new Array2DRowRealMatrix(R.getRowDimension(), R.getColumnDimension())\n//     var senders = new ListBuffer[ActorRef[GlobalState]]() // list of actors in leader's network we want to send the calculated global state to\n//     Behaviors.receive { (context, message) =>\n//       message match {\n//         case LocalState(measurement, invCovarianceMatrix, sender) => \n//           statesReceived += 1\n//           avgMeasurement = avgMeasurement.add(measurement)\n//           avgCovarianceMatrix = avgCovarianceMatrix.add(invCovarianceMatrix)\n//           if (sender != context.self)\n//             senders.addOne(sender)\n//           // send global state when all messages received\n//           if (statesReceived == numNodes) {\n//             avgMeasurement.mapDivideToSelf(numNodes)\n//             avgCovarianceMatrix = new Array2DRowRealMatrix(avgCovarianceMatrix.scalarMultiply(1.0/numNodes).getData())\n//             senders.foreach(sender => {\n//               context.log.info(s\"Sending global state to ${sender}\\n\")\n//               sender ! GlobalState(avgMeasurement, avgCovarianceMatrix)\n//             })\n//             estimating(avgMeasurement, avgCovarianceMatrix, leader, replyTo, numNodes)\n//           } else {\n//             Behaviors.same\n//           }\n//         case _ =>\n//           Behaviors.same\n//       }\n//     }\n//   }\n\n//   private def receiveGlobalState(leader: ActorRef[LocalState], replyTo: ActorRef[Estimate], numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.receive { (context, message) =>\n//     context.log.info(s\"Received global state ${message}\")\n//     message match {\n//       case GlobalState(avgMeasurement, avgCovarianceMatrix) => \n//         estimating(avgMeasurement, avgCovarianceMatrix, leader, replyTo, numNodes)\n//       case _ =>\n//         Behaviors.same\n//     }\n//   }\n\n//   // Performs equations 22-25 from paper 5 (Distributed Kalman Filter with Embedded Consensus Filters)\n//   // avgMeasurement is y, avgCovarianceMatrix is S\n//   private def estimating(avgMeasurement: ArrayRealVector, avgCovarianceMatrix: Array2DRowRealMatrix, leader: ActorRef[LocalState], replyTo: ActorRef[Estimate], numNodes: Int): Behavior[EstimatorReceivable] = Behaviors.setup { context =>\n//     // M = inv(inv(P) + S)\n//     val M = new Array2DRowRealMatrix(MatrixUtils.inverse(MatrixUtils.inverse(P).add(avgCovarianceMatrix)).getData())\n//     // xHat = xBar + M(y-Sx)\n//     val xHat = xBar.add(M.operate(avgMeasurement.subtract(avgCovarianceMatrix.operate(xBar))))\n//     // P+ = AMA'+BQB'\n//     P = A.multiply(M).multiply(new Array2DRowRealMatrix(A.transpose().getData())).add(new Array2DRowRealMatrix(B.transpose().getData()))\n//     // xBar = A(xHat)\n//     xBar = new ArrayRealVector(A.operate(xHat))\n\n//     // context.log.info(s\"Estimator using \\n y:${avgMeasurement}\\n S:${avgCovarianceMatrix}\\n P:${P}\\n H:${H}\\n xBar:${xBar}\\n M:${M}\\n xHat:${xHat}\\n M(y-Sx):${M.operate(avgMeasurement.subtract(avgCovarianceMatrix.operate(xBar)))}\")\n//     context.log.info(s\"Sending estimate: ${xHat.getEntry(0)}\")\n//     replyTo ! Estimate(xHat.getEntry(0))\n//     idle(leader, numNodes)\n//   }\n// }\n\n// object Generator {\n//   // Constants\n//   val constantVoltage = 10.0\n//   val measurementNoise = 1\n//   val processNoise = 1e-5\n//   val numMeasurements = 5\n\n//   // x = [ 10 ]\n//   var x = new ArrayRealVector(Array(constantVoltage))\n\n//   // Process and measurement noise vectors\n//   val pNoise = new ArrayRealVector(Array(0.0))\n//   val mNoise = new ArrayRealVector(Array(0.0))\n\n//   def apply(estimator: ActorRef[Measurement]): Behavior[Estimate] = generating(estimator, 0)\n\n//   private def generating(estimator: ActorRef[Measurement], messageCounter: Int): Behavior[Estimate] =\n//   Behaviors.setup { context =>\n//     // Randomly crash generator to test timeout\n//     if (Random.nextInt() % 3 == 4 || messageCounter == numMeasurements) {\n//       Behaviors.stopped\n//     } else {\n//       // simulate the process\n//       pNoise.setEntry(0, processNoise * Random.nextGaussian());\n\n//       // x = A * x + p_noise\n//       x.add(pNoise)\n\n//       // simulate the measurement\n//       mNoise.setEntry(0, measurementNoise * Random.nextGaussian());\n\n//       // z = H * x + m_noise\n//       val z = x.add(mNoise)\n\n//       context.log.info(s\"Sending measurement: ${z.getEntry(0)}\")\n//       estimator ! Measurement(z, context.self)\n//       idle(estimator, messageCounter + 1)\n//     }\n//   }\n\n//   private def idle(estimator: ActorRef[Measurement], messageCounter: Int): Behavior[Estimate] = Behaviors.receive { (context, message) =>\n//     context.log.info(s\"Received estimate: ${message.estimate}\")\n//     generating(estimator, messageCounter)\n//   }\n// }\n\nobject KalmanMain {\n  def apply(): Behavior[StartGenerate] =\n    Behaviors.setup { context =>\n      //#create-actors\n      val drone1 = context.spawn(DroneNode(true), \"drone1\")\n      //#create-actors\n      Behaviors.same\n    }\n}\n\n// //#main-class\nobject AkkaQuickstart extends App {\n  val kalmanMain = ActorSystem[StartGenerate](KalmanMain(), \"generator-estimator\")\n  kalmanMain ! StartGenerate()\n}\n// //#main-class\n// //#full-example\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/KalmanMain.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AkkaQuickstart.scala","languageId":"scala","version":1,"text":"//#full-example\npackage com.example\n\n\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport com.example.GreeterMain.SayHello\n\n//#greeter-actor\nobject Greeter {\n  final case class Greet(whom: String, replyTo: ActorRef[Greeted])\n  final case class Greeted(whom: String, from: ActorRef[Greet])\n\n  def apply(): Behavior[Greet] = Behaviors.receive { (context, message) =>\n    context.log.info(\"Hello {}!\", message.whom)\n    //#greeter-send-messages\n    message.replyTo ! Greeted(message.whom, context.self)\n    //#greeter-send-messages\n    Behaviors.same\n  }\n}\n//#greeter-actor\n\n//#greeter-bot\nobject GreeterBot {\n\n  def apply(max: Int): Behavior[Greeter.Greeted] = {\n    bot(0, max)\n  }\n\n  private def bot(greetingCounter: Int, max: Int): Behavior[Greeter.Greeted] =\n    Behaviors.receive { (context, message) =>\n      val n = greetingCounter + 1\n      context.log.info(\"Greeting {} for {}\", n, message.whom)\n      if (n == max) {\n        Behaviors.stopped\n      } else {\n        message.from ! Greeter.Greet(message.whom, context.self)\n        bot(n, max)\n      }\n    }\n}\n//#greeter-bot\n\n//#greeter-main\nobject GreeterMain {\n\n  final case class SayHello(name: String)\n\n  def apply(): Behavior[SayHello] =\n    Behaviors.setup { context =>\n      //#create-actors\n      val greeter = context.spawn(Greeter(), \"greeter\")\n      //#create-actors\n\n      Behaviors.receiveMessage { message =>\n        //#create-actors\n        val replyTo = context.spawn(GreeterBot(max = 3), message.name)\n        //#create-actors\n        greeter ! Greeter.Greet(message.name, replyTo)\n        Behaviors.same\n      }\n    }\n}\n//#greeter-main\n\n//#main-class\n// object AkkaQuickstart extends App {\n//   //#actor-system\n//   val greeterMain: ActorSystem[GreeterMain.SayHello] = ActorSystem(GreeterMain(), \"AkkaQuickStart\")\n//   //#actor-system\n\n//   //#main-send-messages\n//   greeterMain ! SayHello(\"Charles\")\n//   //#main-send-messages\n// }\n//#main-class\n//#full-example\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AkkaQuickstart.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/GlobalStateCalc.scala","languageId":"scala","version":1,"text":"package com.example\n\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix\nimport org.apache.commons.math3.linear.ArrayRealVector\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport scala.collection.mutable.ListBuffer\n\ntrait KalmanState extends DroneNode.Event\ncase class LocalState(measurement: ArrayRealVector, invCovarianceMatrix: Array2DRowRealMatrix, sender: ActorRef[GlobalState]) extends KalmanState\ncase class CovarianceMatrix(covarianceMatrix: Array2DRowRealMatrix) extends KalmanState\ncase class MeasurementVector(measurementVector: ArrayRealVector) extends KalmanState\n\n/**\n  * The leader drone will spawn a GlobalStateCalc actor to calculate the average measurement\n  * vector and covariance matrix from the local states of other drones in the network\n  */\nobject GlobalStateCalc {\n    // Constants\n    val measurementVectorLength = 1\n\n    def apply(numNodes: Int): Behavior[KalmanState] = Behaviors.setup { context =>\n        val avgCovarianceCalc = context.spawn(AvgCovarianceCalc(numNodes, context.self), \"avgCovarianceCalc\")\n        val avgMeasurementCalc = context.spawn(AvgMeasurementCalc(numNodes, context.self), \"avgMeasurmentCalc\")\n        calculateGlobalState(numNodes, avgCovarianceCalc, avgMeasurementCalc)\n    }\n\n    private def calculateGlobalState(numNodes: Int, avgCovarianceCalc: ActorRef[CovarianceMatrix], avgMeasurementCalc: ActorRef[MeasurementVector]): Behavior[KalmanState] = Behaviors.setup { context =>\n        var statesReceived = 0 // number of local state messages received so far\n        var avgMeasurement = new ArrayRealVector(measurementVectorLength)\n        var networkNodes = new ListBuffer[ActorRef[GlobalState]]() // list of actors in leader's network we want to send the calculated global state to\n        Behaviors.receive { (context, message) =>\n            message match {\n                case LocalState(measurement, invCovarianceMatrix, sender) => \n                    statesReceived += 1\n                    avgMeasurementCalc ! MeasurementVector(measurement)\n                    avgCovarianceCalc ! CovarianceMatrix(invCovarianceMatrix)\n                    networkNodes.addOne(sender)\n                    // send global state when all messages received, note that this currently assumes numNodes stays constant\n                    if (statesReceived == numNodes) {\n                        receiveAverages(numNodes, networkNodes, avgCovarianceCalc, avgMeasurementCalc)\n                    } else {\n                        Behaviors.same\n                    }\n                case _ =>\n                    Behaviors.same\n            }\n        }\n    }\n\n    private def receiveAverages(numNodes: Int, networkNodes: ListBuffer[ActorRef[GlobalState]], avgCovarianceCalc: ActorRef[CovarianceMatrix], avgMeasurementCalc: ActorRef[MeasurementVector]): Behavior[KalmanState] = Behaviors.setup { context =>\n        var avgCovarianceMatrix: Option[Array2DRowRealMatrix] = None\n        var avgMeasurementVector: Option[ArrayRealVector] = None\n        Behaviors.receive { (context, message) =>\n            message match {\n                case CovarianceMatrix(covarianceMatrix) =>\n                    avgCovarianceMatrix = Some(covarianceMatrix)\n                case MeasurementVector(measurementVector) =>\n                    avgMeasurementVector = Some(measurementVector)\n                case _ =>\n                    Behaviors.same\n            }\n            if (avgCovarianceMatrix != None && avgMeasurementVector != None) {\n                networkNodes.foreach(node => {\n                    context.log.debug(s\"Sending global state to ${node}\\n\")\n                    node ! GlobalState(avgMeasurementVector.get, avgCovarianceMatrix.get)\n                })\n                calculateGlobalState(numNodes, avgCovarianceCalc, avgMeasurementCalc)\n            } else {\n                Behaviors.same\n            }\n        }\n    }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/GlobalStateCalc.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/DroneSensor.scala","languageId":"scala","version":1,"text":"package com.example\n\nimport org.apache.commons.math3.linear.ArrayRealVector\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport scala.util.Random\nimport scala.io.Source._\n\ncase class Measurement(measurement: ArrayRealVector) extends DroneNode.KalmanMessage\n\n/**\n  * A drone spawns a DroneSensor actor from which it receives sensor measurements\n  */\nobject DroneSensor {\n  // Constants\n  val constantVoltage = 10.0\n  val measurementNoise = 1\n  val processNoise = 1e-5\n  println(System.getProperty(\"user.dir\"))\n  val droneInput = fromFile(\"drone.txt\").getLines\n\n  // x = [ 10 ]\n  // var x = new ArrayRealVector(Array(constantVoltage))\n\n  // Process and measurement noise vectors\n  val pNoise = new ArrayRealVector(Array(0.0))\n  val mNoise = new ArrayRealVector(Array(0.0))\n\n  def apply(droneRef: ActorRef[DroneNode.KalmanMessage]): Behavior[DroneNode.KalmanMessage] = generating(droneRef, 0)\n\n  private def generating(droneRef: ActorRef[DroneNode.KalmanMessage], messageCounter: Int): Behavior[DroneNode.KalmanMessage] =\n  Behaviors.setup { context =>\n    // Randomly crash generator to test timeout\n    if (Random.nextInt() % 3 == 4) {\n      context.log.info(\"Crashing drone\")\n      Behaviors.stopped\n    } else {\n      // simulate the process\n      // pNoise.setEntry(0, processNoise * Random.nextGaussian());\n      if (droneInput.hasNext) {\n        val strInput = droneInput.next()\n        var numInput = 0.0\n        try {\n          numInput = strInput.toFloat\n        } catch {\n          case e: Exception => {\n            context.log.info(s\"Invalid input ${strInput} shutting down drone\")\n            Behaviors.stopped\n          }\n        }\n        val z = new ArrayRealVector(Array(numInput))\n        context.log.info(s\"Sending measurement: ${z.getEntry(0)}\")\n        droneRef ! Measurement(z)\n        idle(droneRef, messageCounter + 1)\n      } else {\n        context.log.info(s\"Reached end of input file, shutting down drone\")\n        Behaviors.stopped\n      }\n    }\n  }\n\n  // Wait to receive estimate back before sending new measurement\n  private def idle(estimator: ActorRef[DroneNode.KalmanMessage], messageCounter: Int): Behavior[DroneNode.KalmanMessage] = Behaviors.receive { (context, message) =>\n    message match {\n      case Estimate(estimate) =>\n        context.log.debug(s\"Received estimate: ${estimate}\")\n        generating(estimator, messageCounter)\n    }\n  }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/DroneSensor.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/DroneKalmanEstimator.scala","languageId":"scala","version":1,"text":"package com.example\n\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix\nimport org.apache.commons.math3.linear.ArrayRealVector\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport scala.concurrent.duration._\nimport scala.collection.mutable.ListBuffer\nimport org.apache.commons.math3.linear.MatrixUtils\n\nfinal case class Estimate(estimate: Double) extends DroneNode.KalmanMessage\nfinal case object Timeout extends DroneNode.KalmanMessage\nfinal case class GlobalState(avgMeasurement: ArrayRealVector, avgCovarianceMatrix: Array2DRowRealMatrix) extends DroneNode.KalmanMessage\nfinal case class EstimatorInput(measurement: ArrayRealVector, parentDrone: ActorRef[ DroneNode.KalmanMessage], leadDrone: ActorRef[KalmanState]) extends  DroneNode.KalmanMessage\n\n/**\n  * A drone spawns a DroneKalmanEstimator actor to send its sensor measurments to and receives a kalman estimate from\n  */\nobject DroneKalmanEstimator {\n  // Constants\n  val constantVoltage = 10.0\n  val measurementNoise = 1.0\n  val processNoise = 1e-5\n  \n  // A = [ 1 ]\n  val A = new Array2DRowRealMatrix(Array(1.0))\n\n  // B = null\n  val B = new Array2DRowRealMatrix(Array(0.0))\n\n  // H = [ 1 ]\n  val H = new Array2DRowRealMatrix(Array(1.0))\n\n  // x = [ 10 ]\n  var xBar = new ArrayRealVector(Array(constantVoltage))\n\n  // Q = [ 1e-5 ]\n  val Q = new Array2DRowRealMatrix(Array(processNoise))\n\n  // P = [ 1 ]\n  var P = new Array2DRowRealMatrix(Array(1.0))\n\n  // R = [ 0.1 ]\n  val R = new Array2DRowRealMatrix(Array(measurementNoise))\n\n  def apply(numNodes: Int): Behavior[DroneNode.KalmanMessage] = idle()\n\n  private def idle(): Behavior[DroneNode.KalmanMessage] = Behaviors.withTimers { timer =>\n    timer.startSingleTimer(Timeout, 5.second)\n    // Wait for measurement data\n    Behaviors.receive { (context, message) =>\n      print(message)\n      message match {\n        case EstimatorInput(realVec, parent, parentDrone) =>\n          sendLocalState(realVec, parent, parentDrone)\n        case Timeout =>\n          context.log.info(\"Timed out waiting for measurement...\")\n          Behaviors.stopped\n        case _ =>\n          Behaviors.same\n      }\n    }\n  }\n\n  private def sendLocalState(measurement: ArrayRealVector, parentDrone: ActorRef[DroneNode.KalmanMessage], leader: ActorRef[LocalState]): Behavior[DroneNode.KalmanMessage] = Behaviors.setup { context =>\n    // Need to do \"new Array2DRowRealMatrix(<Matrix>.getData())\" since inner result returns a RealMatrix \n    leader ! LocalState(measurement, new Array2DRowRealMatrix(H.transpose().multiply(MatrixUtils.inverse(R)).multiply(H).getData()), context.self)\n    receiveGlobalState(leader, parentDrone)\n  }\n\n  private def receiveGlobalState(leader: ActorRef[LocalState], parentDrone: ActorRef[DroneNode.KalmanMessage]): Behavior[DroneNode.KalmanMessage] = Behaviors.receive { (context, message) =>\n    context.log.debug(s\"Received global state ${message}\")\n    message match {\n      case GlobalState(avgMeasurement, avgCovarianceMatrix) => \n        estimating(avgMeasurement, avgCovarianceMatrix, leader, parentDrone)\n      case _ =>\n        Behaviors.same\n    }\n  }\n\n  // Performs equations 22-25 from paper 5 (Distributed Kalman Filter with Embedded Consensus Filters)\n  // avgMeasurement is y, avgCovarianceMatrix is S\n  private def estimating(avgMeasurement: ArrayRealVector, avgCovarianceMatrix: Array2DRowRealMatrix, leader: ActorRef[LocalState], parentDrone: ActorRef[DroneNode.KalmanMessage]): Behavior[DroneNode.KalmanMessage] = Behaviors.setup { context =>\n    // M = inv(inv(P) + S)\n    val M = new Array2DRowRealMatrix(MatrixUtils.inverse(MatrixUtils.inverse(P).add(avgCovarianceMatrix)).getData())\n    // xHat = xBar + M(y-Sx)\n    val xHat = xBar.add(M.operate(avgMeasurement.subtract(avgCovarianceMatrix.operate(xBar))))\n    // P+ = AMA'+BQB'\n    P = A.multiply(M).multiply(new Array2DRowRealMatrix(A.transpose().getData())).add(new Array2DRowRealMatrix(B.transpose().getData()))\n    // xBar = A(xHat)\n    xBar = new ArrayRealVector(A.operate(xHat))\n\n    // context.log.info(s\"Estimator using \\n y:${avgMeasurement}\\n S:${avgCovarianceMatrix}\\n P:${P}\\n H:${H}\\n xBar:${xBar}\\n M:${M}\\n xHat:${xHat}\\n M(y-Sx):${M.operate(avgMeasurement.subtract(avgCovarianceMatrix.operate(xBar)))}\")\n    context.log.info(s\"Sending estimate: ${xHat.getEntry(0)}\")\n    parentDrone ! Estimate(xHat.getEntry(0))\n    idle()\n  }\n\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/DroneKalmanEstimator.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AvgMeasurementCalc.scala","languageId":"scala","version":1,"text":"package com.example\n\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport org.apache.commons.math3.linear.RealVector\nimport org.apache.commons.math3.linear.ArrayRealVector\n\nobject AvgMeasurementCalc {\n    val measurementVectorLength = 1\n\n    def apply(numNodes: Int, globalStateCalculator: ActorRef[KalmanState]): Behavior[MeasurementVector] = calculateAverage(numNodes, globalStateCalculator)\n\n    private def calculateAverage(numNodes: Int, globalStateCalculator: ActorRef[KalmanState]): Behavior[MeasurementVector] = Behaviors.setup { context =>\n        var statesReceived = 0\n        var avgMeasurementVector = new ArrayRealVector(measurementVectorLength)\n        Behaviors.receive { (context, message) =>\n            message match {\n                case MeasurementVector(measurementVector) => \n                    statesReceived += 1\n                    avgMeasurementVector = avgMeasurementVector.add(measurementVector)\n                    // send global state when all messages received, note that this currently assumes numNodes stays constant\n                    if (statesReceived == numNodes) {\n                        avgMeasurementVector.mapDivideToSelf(numNodes)\n                        globalStateCalculator ! MeasurementVector(avgMeasurementVector)\n                        statesReceived = 0 \n                        avgMeasurementVector = new ArrayRealVector(measurementVectorLength)\n                    }\n                    Behaviors.same\n                case _ =>\n                    Behaviors.same\n            }\n        }\n    }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AvgMeasurementCalc.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AvgCovarianceCalc.scala","languageId":"scala","version":1,"text":"package com.example\n\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport com.example.GlobalStateCalc\n\nobject AvgCovarianceCalc {\n    val covMatRows = 1\n    val covMatCols = 1\n\n    def apply(numNodes: Int, globalStateCalculator: ActorRef[KalmanState]): Behavior[CovarianceMatrix] = calculateAverage(numNodes, globalStateCalculator)\n\n    private def calculateAverage(numNodes: Int, globalStateCalculator: ActorRef[KalmanState]): Behavior[CovarianceMatrix] = Behaviors.setup { context =>\n        var statesReceived = 0\n        var avgCovarianceMatrix = new Array2DRowRealMatrix(covMatRows, covMatCols)\n        Behaviors.receive { (context, message) =>\n            message match {\n                case CovarianceMatrix(covarianceMatrix) => \n                    statesReceived += 1\n                    avgCovarianceMatrix = avgCovarianceMatrix.add(covarianceMatrix)\n                    // send global state when all messages received, note that this currently assumes numNodes stays constant\n                    if (statesReceived == numNodes) {\n                        avgCovarianceMatrix = new Array2DRowRealMatrix(avgCovarianceMatrix.scalarMultiply(1.0/numNodes).getData())\n                        globalStateCalculator ! CovarianceMatrix(avgCovarianceMatrix)\n                        statesReceived = 0 \n                        avgCovarianceMatrix = new Array2DRowRealMatrix(covMatRows, covMatCols)\n                    }\n                    Behaviors.same\n                case _ =>\n                    Behaviors.same\n            }\n        }\n    }\n}\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AvgCovarianceCalc.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AkkaQuickstart.scala","languageId":"scala","version":1,"text":"//#full-example\npackage com.example\n\n\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport com.example.GreeterMain.SayHello\n\n//#greeter-actor\nobject Greeter {\n  final case class Greet(whom: String, replyTo: ActorRef[Greeted])\n  final case class Greeted(whom: String, from: ActorRef[Greet])\n\n  def apply(): Behavior[Greet] = Behaviors.receive { (context, message) =>\n    context.log.info(\"Hello {}!\", message.whom)\n    //#greeter-send-messages\n    message.replyTo ! Greeted(message.whom, context.self)\n    //#greeter-send-messages\n    Behaviors.same\n  }\n}\n//#greeter-actor\n\n//#greeter-bot\nobject GreeterBot {\n\n  def apply(max: Int): Behavior[Greeter.Greeted] = {\n    bot(0, max)\n  }\n\n  private def bot(greetingCounter: Int, max: Int): Behavior[Greeter.Greeted] =\n    Behaviors.receive { (context, message) =>\n      val n = greetingCounter + 1\n      context.log.info(\"Greeting {} for {}\", n, message.whom)\n      if (n == max) {\n        Behaviors.stopped\n      } else {\n        message.from ! Greeter.Greet(message.whom, context.self)\n        bot(n, max)\n      }\n    }\n}\n//#greeter-bot\n\n//#greeter-main\nobject GreeterMain {\n\n  final case class SayHello(name: String)\n\n  def apply(): Behavior[SayHello] =\n    Behaviors.setup { context =>\n      //#create-actors\n      val greeter = context.spawn(Greeter(), \"greeter\")\n      //#create-actors\n\n      Behaviors.receiveMessage { message =>\n        //#create-actors\n        val replyTo = context.spawn(GreeterBot(max = 3), message.name)\n        //#create-actors\n        greeter ! Greeter.Greet(message.name, replyTo)\n        Behaviors.same\n      }\n    }\n}\n//#greeter-main\n\n//#main-class\n// object AkkaQuickstart extends App {\n//   //#actor-system\n//   val greeterMain: ActorSystem[GreeterMain.SayHello] = ActorSystem(GreeterMain(), \"AkkaQuickStart\")\n//   //#actor-system\n\n//   //#main-send-messages\n//   greeterMain ! SayHello(\"Charles\")\n//   //#main-send-messages\n// }\n//#main-class\n//#full-example\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/main/scala/com/example/AkkaQuickstart.scala"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/detectandtrack/src/test/scala/com/example/AkkaQuickstartSpec.scala","languageId":"scala","version":1,"text":"//#full-example\npackage com.example\n\nimport akka.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit\nimport com.example.Greeter.Greet\nimport com.example.Greeter.Greeted\nimport org.scalatest.wordspec.AnyWordSpecLike\n\n//#definition\nclass AkkaQuickstartSpec extends ScalaTestWithActorTestKit with AnyWordSpecLike {\n//#definition\n\n  \"A Greeter\" must {\n    //#test\n    \"reply to greeted\" in {\n      val replyProbe = createTestProbe[Greeted]()\n      val underTest = spawn(Greeter())\n      underTest ! Greet(\"Santa\", replyProbe.ref)\n      replyProbe.expectMessage(Greeted(\"Santa\", underTest.ref))\n    }\n    //#test\n  }\n\n}\n//#full-example\n"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/MyDrone.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.ServiceKey\nimport akka.actor.typed.receptionist.Receptionist\n\n\nimport scala.concurrent.duration._\n\nobject DroneNode{\n    trait Event\n    case object Start extends Event\n\n    val DroneServiceKey = ServiceKey[Event](\"DroneService\")\n    \n    def apply(): Behavior[Event] = \n        Behaviors.setup{ ctx =>\n            // Need to spawn the sensors\n            ctx.system.receptionist ! Receptionist.Register(DroneNode.DroneServiceKey, ctx.self)\n            Behaviors.receiveMessage{\n                case Start =>\n                    ctx.log.info(\"[DRONE]Started the node\")\n                    Behaviors.same\n            }\n\n        }\n\n\n\n}"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/dmukherjee/UIUC/SandiaTrack/ActorTrackAndDetect/akka-cluster/src/main/scala/sample/cluster/actordetrack/DroneManager.scala","languageId":"scala","version":1,"text":"package sample.cluster.actordetrack\nimport akka.actor.typed.ActorRef\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.Receptionist\n\n\nobject DroneManager{\n    \n    def apply():Behavior[Receptionist.Listing] ={\n        Behaviors.setup[Receptionist.Listing]{ ctx=>\n            ctx.log.info(\"[DRONE]Manager Started\")\n            // ctx.system.receptionist ! Receptionist.Subscribe(App.DroneServiceKey, ctx.self)\n            ctx.system.receptionist ! Receptionist.Subscribe(DroneNode.DroneServiceKey, ctx.self)\n            Behaviors.receiveMessagePartial[Receptionist.Listing]{\n            case DroneNode.DroneServiceKey.Listing(listings) =>\n              listings.foreach{ps => \n                ps ! DroneNode.Start\n                ctx.log.info(\"[DRONE] New Drone Started\")\n              }\n              Behaviors.same\n          }\n\n        }\n    }\n}"}})[0m[0J
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m[0J
